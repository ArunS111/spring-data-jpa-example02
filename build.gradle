plugins {  id 'java'}ext.sourceCompatibility = 1.7ext.targetCompatibility = 1.7repositories {  jcenter()}configurations {  providedCompile}configurations {  all*.exclude group: 'xml-apis'  all*.exclude group: 'commons-logging'  all*.exclude module: 'slf4j-log4j12'}def groupVersionOverrides = [    "com.google.guava:guava"               : "$guavaVersion",    "org.hibernate:hibernate-core"         : "$hibernateVersion",    "org.hibernate:hibernate-entitymanager": "$hibernateVersion",    "org.springframework:spring-aop"       : "$springVersion",    "org.springframework:spring-beans"     : "$springVersion",    "org.springframework:spring-context"   : "$springVersion",    "org.springframework:spring-core"      : "$springVersion",    "org.springframework:spring-tx"        : "$springVersion",    "org.springframework:spring-jdbc"      : "$springVersion",    "org.springframework:spring-orm"       : "$springVersion",    "org.slf4j:slf4j-api"                  : "$slf4jVersion",    "junit:junit"                          : "$junitVersion",]configurations.all {  resolutionStrategy {    failOnVersionConflict()    eachDependency { DependencyResolveDetails details ->      println details.requested.version      def overrideVersion = groupVersionOverrides[details.requested.group + ":" + details.requested.name]      if (overrideVersion != null && details.requested.version != overrideVersion) {        details.useVersion overrideVersion      }    }  }}dependencies {  providedCompile(      "com.mysema.querydsl:querydsl-apt:$querydslVersion",      "com.google.auto.value:auto-value:$autovalueVersion")  compile(      "com.mysema.querydsl:querydsl-jpa:$querydslVersion",      "com.mysema.querydsl:querydsl-collections:$querydslVersion",      "org.springframework.data:spring-data-jpa:$springdataVersion",      "org.hsqldb:hsqldb:$hsqldbVersion",      "joda-time:joda-time:$jodatimeVersion",      "org.hibernate:hibernate-ehcache:$hibernateVersion",      "org.hibernate:hibernate-validator:$hibernateValidatorVersion",      "org.jadira.usertype:usertype.core:$jadiraVersion",      "net.ttddyy:datasource-proxy:$ttddyyVersion"  )  runtime(      "ch.qos.logback:logback-classic:$logbackVersion",  )  testCompile(      "com.google.guava:guava-testlib:$guavaVersion",      "org.springframework:spring-test:$springVersion",      "org.testng:testng:$testngVersion")}sourceSets {  generated.java.srcDirs = ['src/generated/java']}task querydslJpa(type: JavaCompile, group: 'build', description: 'Invoke annotation processors with main classpath + apt classpath') {  source = sourceSets.main.java  classpath = configurations.compile + configurations.providedCompile  options.compilerArgs = [      '-XprintProcessorInfo',      '-proc:only',      '-processor', 'com.mysema.query.apt.jpa.JPAAnnotationProcessor',      '-s', sourceSets.generated.java.srcDirs.iterator().next().toString()  ]  destinationDir = sourceSets.generated.java.srcDirs.iterator().next()}task querydslDefault(type: JavaCompile, group: 'build', description: 'Invoke annotation processors with main classpath + apt classpath') {  source = sourceSets.main.java  classpath = configurations.compile + configurations.providedCompile  options.compilerArgs = [      '-XprintProcessorInfo',      '-proc:only',      '-processor', 'com.mysema.query.apt.QuerydslAnnotationProcessor',      '-s', sourceSets.generated.java.srcDirs.iterator().next().toString()  ]  destinationDir = sourceSets.generated.java.srcDirs.iterator().next()}task autovalue(type: JavaCompile, group: 'build', description: 'Invoke annotation processors with main classpath + apt classpath') {  source = sourceSets.main.java  classpath = configurations.compile + configurations.providedCompile  options.compilerArgs = [      '-XprintProcessorInfo',      '-proc:only',      '-processor', 'com.google.auto.value.processor.AutoValueProcessor',      '-s', sourceSets.generated.java.srcDirs.iterator().next().toString()  ]  destinationDir = sourceSets.generated.java.srcDirs.iterator().next()}compileJava {  description = "description: ignore processor hints, keep all other hints, disable annotation processing for main compile task - e.g autovalue"  classpath = configurations.compile + configurations.providedCompile  dependsOn querydslDefault, querydslJpa, autovalue  source = sourceSets.main.java + sourceSets.generated.java  sourceCompatibility = JavaVersion.VERSION_1_7  targetCompatibility = JavaVersion.VERSION_1_7  options.encoding = "UTF-8"  options.compilerArgs = [      '-proc:none',      '-Xlint:all,-processing'  ]}clean {  delete sourceSets.generated.java.srcDirs}test {  useTestNG()  minHeapSize = "128m"  maxHeapSize = "128m"}task wrapper(type: Wrapper) {  gradleVersion = '2.4'}